// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  username       String?        @unique
  email          String?        @unique
  password       String? // For email/password authentication
  emailVerified  DateTime?
  avatar         String?
  accounts       Account[]
  sessions       Session[]
  journalEntries JournalEntry[]
  comments       Comment[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JournalEntry {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mediaUrls String[] // Array of media URLs (for images and videos)
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]

  @@index([userId])
}

model Comment {
  id             Int          @id @default(autoincrement())
  content        String
  createdAt      DateTime     @default(now())
  userId         Int
  journalEntryId Int
  user           User         @relation(fields: [userId], references: [id])
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])

  @@index([userId])
  @@index([journalEntryId])
}
